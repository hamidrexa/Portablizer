/* Includes ------------------------------------------------------------------*/
#include "stm32f0xx_hal.h"
#include "string.h"
#include<stdio.h>
#include<math.h>
#define COUNTOF(__BUFFER__)   (sizeof(__BUFFER__) / sizeof(*(__BUFFER__)))
/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim17;

UART_HandleTypeDef huart1;
uint8_t aTxBuffer1[] = "RXNE wake-up successful";


/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void Error_Handler(void);
static void MX_GPIO_Init(void);
//static void MX_TIM1_Init(void);
//static void MX_TIM3_Init(void);
//static void MX_TIM14_Init(void);
//static void MX_TIM17_Init(void);
int getHexVal(char c);
void send(char* hex);
void delay (int i){
	while(i>0){
	TIM16->SR &=0xfe;
	  TIM16->CNT=0;
						while((!((TIM16->SR)&0x01)) );
			 
					 TIM16->CNT=0;
	i--;
	}
}
void wating(void){
	//GPIOA->ODR&=0x80;
GPIOA->ODR=0x70; 
		delay(100);
	while(1){
		 if( (GPIOB->IDR)&(0x02)){while((GPIOB->IDR)&(0x02));}
		 else{while(!((GPIOB->IDR)&(0x02)));break;}
		 
	 }
}
double num(int pa1,int pa2,int pa3,int pb1,int pb2,int pb3,int* pointer){

		int a=0;
		int k[5];
		double x1;
		char buf[50];
			wating();
		delay(3);
				GPIOA->ODR=pa1; 
		delay(10);
 if((GPIOB->IDR)&(pb)) k[0]=1;else k[0]=0;
			a |= (k[0])<<6;//b d6 pa11
 
		 wating();
		delay(3);
			GPIOA->ODR=pa2; 
		delay(2);
		if((GPIOB->IDR)&(pb)) k[1]=1;else k[1]=0;
				a |= (k[1])<<7;//a	 d7 pa9
				
					 wating();
		delay(3);
					GPIOA->ODR=pa3; 
			delay(2);
		if((GPIOB->IDR)&(pb)) k[2]=1;else k[2]=0;
				a |= (k[2])<<2;//f	 d2 pa7
 
 
 
 //----------------------
 
		wating();
		delay(20);
				GPIOA->ODR=pa1; 
		delay(10);
	if((GPIOB->IDR)&(pb)) k[0]=1;else k[0]=0;
			a |= (k[0])<<5;//c d5 pa11
 
		 wating();
		delay(20);
			GPIOA->ODR=pa2; 
		delay(10);
		if((GPIOB->IDR)&(pb)) k[1]=1;else k[1]=0;
					a |= (k[1]<<1) ;//g	 d1 pa9
				
					 wating();
		delay(20);
					GPIOA->ODR=pa3; 
			delay(10);
		if((GPIOB->IDR)&(pb)) k[2]=1;else k[2]=0;
	a |= (k[2])<<3;//e	 d3 pa7 
	//---------------------------
			wating();
		delay(55);
				GPIOA->ODR=pa1; 
		delay(10);
	if((GPIOB->IDR)&(pb)) k[0]=1;else k[0]=0;
	a |= (k[0]) ;//p	d0 pa11

//	GPIOA->ODR|=0x80;
		 wating();
		GPIOA->ODR=pa2; 
		//	GPIOA->ODR&=0x7f;
		delay(65);
 
		
//		delay(10);
		if((GPIOB->IDR)&(pb)) k[1]=1;else k[1]=0;
						a |= (k[1])<<4;//d	 d4 pa9
		
 
 switch (a|0x01){
			case 0x03:{x1=0;break;}
			case 0x9f:{x1=1;break;}
			case 0x25:{x1=2;break;}
			case 0x0d:{x1=3;break;}
			case 0x99:{x1=4;break;}
			case 0x49:{x1=5;break;}
			case 0x41:{x1=6;break;}
			case 0x1b:{x1=7;break;}
			case 0x01:{x1=8;break;}
			case 0x09:{x1=9;break;}
		}
//	 		sprintf(buf,"a:%x ==x:%f\n",a ,x1);
// 				HAL_UART_Transmit(&huart1, (uint8_t*)buf, COUNTOF(buf)-1, 5000);
// 
//				
		
			delay(100);
	 return x1;
}

int main(void)
{
	HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();

	
	
__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_HSI);
RCC->APB2ENR |= RCC_APB2ENR_TIM16EN; /* (1) */
RCC->AHBENR |= RCC_AHBENR_GPIOAEN; /* (2) */
RCC->AHBENR |= RCC_AHBENR_GPIOBEN; /* (2) */
RCC->APB2ENR |= RCC_APB2ENR_TIM1EN; /* (1) */

//GPIOB->MODER = GPIO_MODER_MODER2_0;
//GPIOB->OSPEEDR=GPIO_OSPEEDR_OSPEEDR0_Msk;
	//GPIOB->PUPDR=GPIO_PUPDR_PUPDR0_1;
	
	GPIOA->MODER = GPIO_MODER_MODER4_0|GPIO_MODER_MODER5_0|GPIO_MODER_MODER6_0|GPIO_MODER_MODER7_0;
 
	GPIOA->PUPDR=GPIO_PUPDR_PUPDR0_1|GPIO_PUPDR_PUPDR1_1 |GPIO_PUPDR_PUPDR4_1|GPIO_PUPDR_PUPDR5_1|GPIO_PUPDR_PUPDR6_1
	|GPIO_PUPDR_PUPDR7_1|GPIO_PUPDR_PUPDR8_1|GPIO_PUPDR_PUPDR9_1|GPIO_PUPDR_PUPDR11_1;
TIM16->PSC |=1; /* (1) */
TIM16->ARR = 1000- 1; /* (2) */
TIM16->CCR1 = 1000- 1; /* (3) */  
TIM1->CCMR1 |= TIM_CCMR1_OC1M_0 | TIM_CCMR1_OC1M_1; /* (4) */
TIM16->CCER |= TIM_CCER_CC1E; /* (5)*/
TIM16->BDTR |= TIM_BDTR_MOE; /* (6) */
TIM16->CR1 |= TIM_CR1_CEN; /* (7) */

TIM1->PSC |=8; /* (1) */
TIM1->ARR = 60000- 1; /* (2) */
TIM1->CCR1 = 60000- 1; /* (3) */
TIM1->CCMR1 |= TIM_CCMR1_OC1M_0 | TIM_CCMR1_OC1M_1; /* (4) */
TIM1->CCER |= TIM_CCER_CC1E; /* (5)*/
TIM1->BDTR |= TIM_BDTR_MOE; /* (6) */
TIM1->CR1 |= TIM_CR1_CEN; /* (7) */



int i,j;
char buf8[100];
char buf5[50];
char buf[60];
char hex2[400];
uint32_t c_s = 0;
uint32_t n_s = 0;
int* k;
int* lcd;
k = (int*) malloc (25);
lcd = (int*) malloc (100);
int ac=50000;
float co_time=0;
double result,x1,x2,x11,x22=0;
int flag=1;
char op=0;
int point1=0;
int point2=0;
int state=1;
int kmax;int xxx;
n_s=0x00;
int key;
k[5]=0;//because start whit 5 :))
huart1.Instance = USART1;
HAL_UART_DeInit(&huart1); 
huart1.Init.BaudRate   = 115200;;
huart1.Init.WordLength = UART_WORDLENGTH_8B;
huart1.Init.StopBits   = UART_STOPBITS_1;
huart1.Init.Parity     = UART_PARITY_NONE; 
huart1.Init.Mode       = UART_MODE_TX_RX; 
HAL_UART_Init(&huart1) ;


sprintf(hex2,"54454A415241545F42414E4B30323030303030303030303430303030303030303030303130303030313220202020202020202020202020202020202020202020202000006EB1C5B923FAF77A");

NVIC_EnableIRQ(SysTick_IRQn); /* (1) */
NVIC_SetPriority(SysTick_IRQn,2); /* (2) */

TIM1->SR &=0xfe;
// while(1){
			sprintf(buf,"s\n");
 				HAL_UART_Transmit(&huart1, (uint8_t*)buf, COUNTOF(buf)-1, 5000);
// 
// 
// }		
	int common=n_s&0x800;
	int seg_a=n_s&0x200;
	int seg_b=n_s&0x080;
	int seg_c=n_s&0x020;	
	int a,b,c;
	int pa1,pa2,pa3,pb;
	double sum;
while (1)
  {
		sum=0;
//			 
//				GPIOA->ODR=0x40; 
//		delay(10);
// if((GPIOB->IDR)&(0x20)) a=1;else a=0;
//  sprintf(buf," %d\n",(GPIOB->IDR)&(0x10));
//  HAL_UART_Transmit(&huart1, (uint8_t*)buf, COUNTOF(buf)-1, 5000);
 //7seg1
pa1=0x00;
pa2=0x10;
pa3=0x20;
pb=0x02;
x1=num(pa1,pa2,pa3,pb);
 sprintf(buf," 1===x:%f\n",x1);
 HAL_UART_Transmit(&huart1, (uint8_t*)buf, COUNTOF(buf)-1, 5000);
		sum+=x1;
	/// 7seg2
		//2_1**d4
		//2_2**d5
		//2_3**d6
		
		pa1=0x40;
pa2=0x50;
pa3=0x60;
pb=0x02;
x1=num(pa1,pa2,pa3,pb);
 sprintf(buf,"null\n" ,x1);
 HAL_UART_Transmit(&huart1, (uint8_t*)buf, COUNTOF(buf)-1, 5000);
delay(1000);
pow(10,1);jkoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
/// 7seg3
		//3_1**d4
		//3_2**d5
		//3_3**d6
		
		pa1=0x40;
pa2=0x50;
pa3=0x60;
pb=0x02;
x1=num(pa1,pa2,pa3,pb);

 sprintf(buf,"3==x:%f\n" ,x1);
 HAL_UART_Transmit(&huart1, (uint8_t*)buf, COUNTOF(buf)-1, 5000);
delay(1000);
sum+=x1*pow(10,2);
 	/// 7seg14
		//14_1**d3
		//14_2**d2
		//14_3**d1
pa1=0x30;
pa2=0x20;
pa3=0x10;
pb=0x01; 
x1=num(pa1,pa2,pa3,pb);
 sprintf(buf,"14==x:%f\n" ,x1);
 HAL_UART_Transmit(&huart1, (uint8_t*)buf, COUNTOF(buf)-1, 5000);
		 sum+=x1*pow(10,13);
		/// 7seg13
		//13_1**d5
		//13_2**d4
		//13_3**d0
 
 pa1=0x50;
pa2=0x40;
pa3=0x00;
pb=0x01;
x1=num(pa1,pa2,pa3,pb);
 sprintf(buf,"13==x:%f\n" ,x1);
 HAL_UART_Transmit(&huart1, (uint8_t*)buf, COUNTOF(buf)-1, 5000);
  sum+=x1*pow(10,12);
		/// 7seg12
		//12_1**d2
		//12_2**d1
		//12_3**d0
 
 pa1=0x20;
pa2=0x10;
pa3=0x00;
pb=0x20;
x1=num(pa1,pa2,pa3,pb);
 sprintf(buf,"12==x:%f\n" ,x1);
 HAL_UART_Transmit(&huart1, (uint8_t*)buf, COUNTOF(buf)-1, 5000);
 	 sum+=x1*11;
		/// 7seg11
		//11_1**d3
		//11_2**d7
		//11_3**d6
// 
 pa1=0x30;
pa2=0x70;
pa3=0x60;
pb=0x20;
x1=num(pa1,pa2,pa3,pb);
 sprintf(buf,"11==x:%f\n" ,x1);
 HAL_UART_Transmit(&huart1, (uint8_t*)buf, COUNTOF(buf)-1, 5000);
	 sum+=x1*10;
		/// 7seg10
		//10_1**d4
		//10_2**d5
		//10_3**d6
 
 pa1=0x40;
pa2=0x50;
pa3=0x60;
pb=0x10;
x1=num(pa1,pa2,pa3,pb);
 sprintf(buf,"10==x:%f\n" ,x1);
 HAL_UART_Transmit(&huart1, (uint8_t*)buf, COUNTOF(buf)-1, 5000);
 	 sum+=x1*pow(10,9);
		/// 7seg9
		//9_1**d4
		//9_2**d5
		//9_3**d6
// 
pa1=0x40;
pa2=0x50;
pa3=0x60;
pb=0x8;
x1=num(pa1,pa2,pa3,pb);
sprintf(buf,"9==x:%f\n" ,x1);
HAL_UART_Transmit(&huart1, (uint8_t*)buf, COUNTOF(buf)-1, 5000);
 	 sum+=x1*pow(10,8);
	 sprintf(buf,"sum==x:%f\n" ,sum);
HAL_UART_Transmit(&huart1, (uint8_t*)buf, COUNTOF(buf)-1, 5000);
	 
 }//end while
	}//end main
 
		
 
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

 
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
  /* USER CODE END Error_Handler */ 
}

#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %drn", file, line) */
  /* USER CODE END 6 */

}

#endif
int getHexVal(char c)
{
  if(c >= '0' && c<= '9')
    return c - '0';
  else if(c >= 'a' && c<= 'f')
    return c - 'a' + 10;
  else if(c >= 'A' && c<= 'F')
    return c - 'A' + 10;
  else
    return -1;//error
}

void send(char* hex){
	

int hexLen = strlen(hex);
char asciiStr[hexLen/2+1];
for(int i = 0; i < hexLen; i +=2)
{
  asciiStr[i/2] = getHexVal(hex[i])*16 + getHexVal(hex[i+1]);
	HAL_UART_Transmit(&huart1, (uint8_t*)(asciiStr+i/2), 1, 5000);
}

}
/**
  * @}
  */ 

/**
  * @}
*/ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
