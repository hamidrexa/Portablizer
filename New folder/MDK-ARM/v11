/* Includes ------------------------------------------------------------------*/
#include "stm32f0xx_hal.h"
#include "string.h"
#include<stdio.h>
#include<math.h>
#define COUNTOF(__BUFFER__)   (sizeof(__BUFFER__) / sizeof(*(__BUFFER__)))
/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim17;

UART_HandleTypeDef huart1;
uint8_t aTxBuffer1[] = "RXNE wake-up successful";


/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void Error_Handler(void);
static void MX_GPIO_Init(void);
//static void MX_TIM1_Init(void);
//static void MX_TIM3_Init(void);
//static void MX_TIM14_Init(void);
//static void MX_TIM17_Init(void);
int getHexVal(char c);
void send(char* hex);


int main(void)
{
	HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();

	
	
__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_HSI);
RCC->APB2ENR |= RCC_APB2ENR_TIM16EN; /* (1) */
RCC->AHBENR |= RCC_AHBENR_GPIOAEN; /* (2) */
RCC->AHBENR |= RCC_AHBENR_GPIOBEN; /* (2) */
RCC->APB2ENR |= RCC_APB2ENR_TIM1EN; /* (1) */

GPIOB->MODER = GPIO_MODER_MODER0_0;
GPIOB->OSPEEDR=GPIO_OSPEEDR_OSPEEDR0_Msk;
GPIOA->PUPDR=GPIO_PUPDR_PUPDR0_1|GPIO_PUPDR_PUPDR1_1 |GPIO_PUPDR_PUPDR4_1|GPIO_PUPDR_PUPDR5_1|GPIO_PUPDR_PUPDR6_1
	|GPIO_PUPDR_PUPDR7_1|GPIO_PUPDR_PUPDR8_1|GPIO_PUPDR_PUPDR9_1|GPIO_PUPDR_PUPDR11_1;
TIM16->PSC |=5; /* (1) */
TIM16->ARR = 60000- 1; /* (2) */
TIM16->CCR1 = 60000- 1; /* (3) */  
 TIM_CCMR1_OC1M_0 | TIM_CCMR1_OC1M_1; /* (4) */
TIM16->CCER |= TIM_CCER_CC1E; /* (5)*/
TIM16->BDTR |= TIM_BDTR_MOE; /* (6) */
TIM16->CR1 |= TIM_CR1_CEN; /* (7) */

TIM1->PSC |=8; /* (1) */
TIM1->ARR = 60000- 1; /* (2) */
TIM1->CCR1 = 60000- 1; /* (3) */
TIM1->CCMR1 |= TIM_CCMR1_OC1M_0 | TIM_CCMR1_OC1M_1; /* (4) */
TIM1->CCER |= TIM_CCER_CC1E; /* (5)*/
TIM1->BDTR |= TIM_BDTR_MOE; /* (6) */
TIM1->CR1 |= TIM_CR1_CEN; /* (7) */



int i,j;
char buf8[100];
char buf5[50];
char buf[10];
char hex2[400];
uint32_t c_s = 0;
uint32_t n_s = 0;
int* k;
k = (int*) malloc (25);
int ac=50000;
float co_time=0;
double result,x1,x2,x11,x22=0;
int flag=1;
char op=0;
int point1=0;
int point2=0;
int state=1;
int kmax;int xxx;
n_s=0x00;
int key;
k[5]=0;//because start whit 5 :))
huart1.Instance = USART1;
HAL_UART_DeInit(&huart1); 
huart1.Init.BaudRate   = 115200;;
huart1.Init.WordLength = UART_WORDLENGTH_8B;
huart1.Init.StopBits   = UART_STOPBITS_1;
huart1.Init.Parity     = UART_PARITY_NONE; 
huart1.Init.Mode       = UART_MODE_TX_RX; 
HAL_UART_Init(&huart1) ;


sprintf(hex2,"54454A415241545F42414E4B30323030303030303030303430303030303030303030303130303030313220202020202020202020202020202020202020202020202000006EB1C5B923FAF77A");

NVIC_EnableIRQ(SysTick_IRQn); /* (1) */
NVIC_SetPriority(SysTick_IRQn,2); /* (2) */

TIM1->SR &=0xfe;
ac=1000;
 
//			sprintf(buf,"s\n");
// 				HAL_UART_Transmit(&huart1, (uint8_t*)buf, COUNTOF(buf)-1, 5000);
 
// 
					
					
while (1)
  {
 
		n_s=(GPIOA->IDR)&(0x9ff3);
				j=0;
			i=0;
	 
// while((!(n_s&0xe3))|(n_s==0x86e3) ) {if(n_s==0x86e3)i++; j++;	n_s=(GPIOA->IDR)&(0x9ff3);}
 while(!(n_s&0xe3))  { j++;	n_s=(GPIOA->IDR)&(0x9ff3);}  

 if(j>100){
	 if(j<1000){
 j=0;
		 for(i=0;i<20;i++){
			 k[i]=0;
		 }
	 	 	 	 GPIOB->ODR= 0x01;
 while(n_s&(0xe3)){
 
		 n_s=(GPIOA->IDR);
		 	switch(n_s&(0xae3)) {
			
				case(0xac2):{k[0]++;break;}//pa0$pa5 "0"
		 		case(0xa62):{k[1]++;break;}	//pa0$pa7 "1"
				case(0xae0):{	k[2]++;break;}//pa0$pa1
				case(0xaa2):{	k[3]++;break;}//pa0$pa6
				case(0x8e2):{	k[4]++;break;}//pa0$pa9
				case(0x2e2):{	k[16]++;break;}//pa11&pa0		"00"
			}
			 	switch(n_s&(0xef2)) {
				case(0x6e2):{k[5]++;break;	}//pa11&pa4
				case(0x6d2):{	k[6]++;break;}//pa11&pa5
				case(0x672):{	k[7]++;break;}//pa11&pa7
				case(0x6f0):{	k[8]++;break;}//pa11&pa1
				case(0x6b2):{	k[9]++;break;}//pa11&pa6
				case(0x002):{	k[15]++;break;}//pa11&pa9	"."	
				case(0x202):{	k[18]++;break;}//pa11&pa10		"000"
				}
				switch(n_s&(0x3d3)) {
				case(0x253):{	k[10]++;break;}//pa8&pa7
				case(0x2d2):{	k[11]++;break;}//pa8&pa0
				case(0x2d1):{	k[12]++;break;}//pa8&pa1
				case(0x293):{	k[13]++;break;}//pa8&pa6 "*"
				case(0x0d3):{	k[14]++;break;}//pa8&pa9		"/"


				case(0x2a3):{	k[17]++;break;}//pa8&pa4		"mu"
			}
				/*
				case(0x8fb3):{k[19]++;break;}//pa12&pa6 "ce"
				
		*/
 
				 
			
	 
	 
			}
//			sprintf(buf8,"+:%d *:%d ---9:%d\n",k[10],k[13],k[9]);
// 	 			 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
 	 	 	 GPIOB->ODR= 0;
// 	 	 GPIOB->ODR=( GPIOB->ODR)^0x01;
		}
	 }
	 


// if(j>3750){
//	 if(j<4000) j=0;
// }

 if(((j>4000))){ 
	 	 	 	 GPIOB->ODR= 0x01;
//	
// 	 sprintf(buf,"1:%d\n",k[1]);
//  				HAL_UART_Transmit(&huart1, (uint8_t*)buf, COUNTOF(buf)-1, 5000);

	 	if((k[0]>0)){
				
								
// 				sprintf(buf8,"0 \n" );
//					 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);		
//			
			
							if(flag){x1=x1*10+0;if(point1>0){point1++;}}
							else{x2=x2*10+0;if(point2>0){point2++;}}
					 
					}
			else if((k[1]>0)){
// 			 sprintf(buf8,"1 \n" );
// 							 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
//							
            if(flag){x1=x1*10+1;if(point1>0){point1++;}}
											else{x2=x2*10+1;if(point2>0){point2++;}}
												}
			else if((k[2]>0) ){
	 
//			  sprintf(buf8,"2 \n" );
//								 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
											if(flag){x1=x1*10+2;if(point1>0){point1++;}}
											else{x2=x2*10+2;if(point2>0){point2++;}}
 
									} 		
			else if( k[3]>0 ){

							 
//														 sprintf(buf8,"3 \n" );
// 									 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
											if(flag){x1=x1*10+3;if(point1>0){point1++;}}
											else{x2=x2*10+3;if(point2>0){point2++;}}
 
									} 
			else if(k[4]>0){
 
//					sprintf(buf8,"4 \n" );
//				 	HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
											if(flag){x1=x1*10+4;if(point1>0){point1++;}}
											else{x2=x2*10+4;if(point2>0){point2++;}}
			 
									} 
		  else if(  k[5]>100){
 	
//				 sprintf(buf8,"5  \n" );
//					 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
// 
							if(flag){x1=x1*10+5;if(point1>0){point1++;}}
							else{x2=x2*10+5;if(point2>0){point2++;}} 
 		

		 }
		  else if( k[6]>0) { 
				 //sprintf(buf8,"6\n");
//					 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
				 
							if(flag){x1=x1*10+6;if(point1>0){point1++;}}
							else{x2=x2*10+6;if(point2>0){point2++;}}
			 

						}
				
			else if( (k[7]>0 )){ 
					//sprintf(buf8,"7 \n" );
// 	 			 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000); 
						if(flag){x1=x1*10+7;if(point1>0){point1++;}}
						else{x2=x2*10+7;if(point2>0){point2++;}} 
 
				 } 
		
			else if( (k[8]>0)){ 
 		 
						if(flag){x1=x1*10+8;if(point1>0){point1++;}}
						else{x2=x2*10+8;if(point2>0){point2++;}}
 
					}
			else if(k[9]>0){
			 
					//sprintf(buf8,"9\n");
//					HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
		 
						
						if(flag){x1=x1*10+9;if(point1>0){point1++;}}
						else{x2=x2*10+9;if(point2>0){point2++;}}
			 
					}
			
			else if (k[10]>0){
				
 		 sprintf(buf8,"+\n",k[10]);
	 			 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
 
								if(point1>0){double power1=(double)pow(10,(point1-1));x1=x1/power1; 	point1=0; }
							if(point2>0) {double power2=(double)pow(10,(point2-1)); x2=x2/power2;	point2=0; }
													 if(op=='*') {if(x2!=0)result= (x1*x2);else result=x1;}
								else if(op=='+'){if(x2!=0) result=(x1+x2);else result=x1;}
								else if(op=='-') result= (x1-x2);
								else if(op=='/') result= (x1/x2);
								else if(op==0) result= x1;
						flag=0;
						  
//			sprintf(buf8," %3f %c %3f = %3f\n",x1,op,x2,result);
// 		 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
						x1=result;	
						 x2=0;
						op='+';
 
					}
				
		
			else if( (k[11]>1)){ //=
 					sprintf(buf8,"=\n");
				HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
 								if(point1>0){double power1=(double)pow(10,(point1-1));x1=x1/power1; 	point1=0; }
							if(point2>0) {double power2=(double)pow(10,(point2-1)); x2=x2/power2;	point2=0; }

							flag=0;
						   if(op=='*') {if(x2!=0)result= (x1*x2);else result=x1;}
								else if(op=='+'){if(x2!=0) result=(x1+x2);else result=x1;}
								else if(op=='-') result= (x1-x2);
								else if(op=='/') result= (x1/x2);
								else if(op==0) result= x1;
//	 	sprintf(buf8," %3f %c %3f = %3f\n",x1,op,x2,result);
//				 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000); 
							op=0; 
						x1=result;
						x2=0;	 
 									for( i=0;i<50;i++){
								buf8[i]=0;
								}
					}
				
			else if( (k[12]>0) ){
 					 sprintf(buf8,"-\n");
 	 			 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000); 
							if(point1>0){double power1=(double)pow(10,(point1-1));x1=x1/power1; 	point1=0; }
							if(point2>0) {double power2=(double)pow(10,(point2-1)); x2=x2/power2;	point2=0; } 
								if(op=='*') {if(x2!=0)result= (x1*x2);else result=x1;}
								else if(op=='+'){if(x2!=0) result=(x1+x2);else result=x1;}
								else if(op=='-') result= (x1-x2);
								else if(op=='/') result= (x1/x2);
								else if(op==0) result= x1;
//										 	sprintf(buf8," %3f %c %3f = %3f\n",x1,op,x2,result);
//				 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
					 		x1=result;							 flag=0;	
						 x2=0;
						op='-';
					}
								 
			else if( (k[13]>0)){
   					 sprintf(buf8,"*\n");
 	 			 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
 
					flag=0;			 				
 						 	if(point1>0){double power1=(double)pow(10,(point1-1));x1=x1/power1; 	point1=0; }
							if(point2>0) {double power2=(double)pow(10,(point2-1)); x2=x2/power2;	point2=0; }
						
					      if(op=='*') {if(x2!=0)result= (x1*x2);else result=x1;}
								else if(op=='+'){if(x2!=0) result=(x1+x2);else result=x1;}
								else if(op=='-') result= (x1-x2);
								else if(op=='/') result= (x1/x2);
								else if(op==0) result= x1;
//				 sprintf(buf8," %3f %c %3f = %3f\n",x1,op,x2,result);
//				 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
					x1=result;op='*';
						 x2=0; 
					}
							 
			else if( (k[14]>0) ){
  					 sprintf(buf8,"/\n");
 	 			 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
 
				  if(point1>0){double power1=(double)pow(10,(point1-1));x1=x1/power1; 	point1=0; }
							if(point2>0) {double power2=(double)pow(10,(point2-1)); x2=x2/power2;	point2=0; }
					 if(op=='*') {if(x2!=0)result= (x1*x2);else result=x1;}
								else if(op=='+'){if(x2!=0) result=(x1+x2);else result=x1;}
								else if(op=='-') result= (x1-x2);
								else if(op=='/') result= (x1/x2);
								else if(op==0) result= x1;
						 
 						flag=0;
						op='/';		 
//						 	 	sprintf(buf8," %3f %c %3f = %3f\n",x1,op,x2,result);
//				 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
					x2=0;	x1=result; 
					}
		
			
				 
			else if( (k[15]>0) ){
 	 				sprintf(buf8,".\n");
 	 			 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
 
						if(flag){ if(point1==0){point1++;}}
						else{ if(point2==0){point2++;}}
 			
			}
			
			else if( k[16]>0){
//sprintf(buf8,"0d\n");
//	 			 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
//				
						if(flag){x1=x1*100;if(point1>0){point1+=2;}}
						else{x2=x2*100 ;if(point2>0){point2+=2;}} 		 
			} 
		  else if(  k[17]>0 ){//send
					for( i=0;i<50;i++){
								buf5[i]=0;
								}
							if (flag)	sprintf(buf5,"%f",x1);
							else  if (x2!=0)sprintf(buf5,"%f",x2);
							else sprintf(buf5,"%f",result);
							int len =strlen(buf5);							
							sprintf(hex2,"54454A415241545F42414E4B303230303030303030303034303%c3%c3%c3%c3%c3%c3%c3%c3%c3%c3%c",buf5[len-18],buf5[len-17],buf5[len-16],buf5[len-15],buf5[len-14], buf5[len-13],buf5[len-12],buf5[len-11],buf5[len-10],buf5[len-9],buf5[len-8] );
							char asciiStr[100];
							for(int i = 0; i < 151; i +=2)
							{
								asciiStr[i/2] = getHexVal(hex2[i])*16 + getHexVal(hex2[i+1]);
								HAL_UART_Transmit(&huart1, (uint8_t*)(asciiStr+i/2), 1, 5000);
							}
			 					
					} 
	   	else if((k[19]>0)){//ce
				
											key=1;
				 //sprintf(buf8,"ce\n",k[19]);
					  
							if(flag){x1=0;if(point1>0){point1=0;}}
							else{x2=0;if(point2>0){point2=0;}}
				 
					}
					else if(k[18]>0){
// 					//sprintf(buf8,"000\n");
//	 			 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
				 
						if(flag){x1=x1*1000;if(point1>0){point1+=3;}}
						else{x2=x2*1000;if(point2>0){point2+=3;}} 
 
					}
				
	 
	
	 	 	 GPIOB->ODR= 0;
									 GPIOB->ODR= (GPIOB->ODR)^0x01;
					while(1){
		
						 n_s=GPIOA->IDR&(0x001);
						j=0;
						while(n_s){ n_s=GPIOA->IDR&(0x001);}
						while(!n_s){
							j++;
							 n_s=GPIOA->IDR&(0x001);
							
						}
						if(j<1000){
							j=0;
							while(n_s){ n_s=GPIOA->IDR&(0x001);}
						while(!n_s){
							j++;
							 n_s=GPIOA->IDR&(0x001);
							
						}
							if(j<1000){
								break;}
						}
					}
									 GPIOB->ODR= (GPIOB->ODR)^0x01;
			 					 sprintf(buf8,"%f\n",x1);
 	 			 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
					//	
//	i=0;
//		while(n_s==0x86e3){i++;n_s=(GPIOA->IDR)&(0x9ff3);}//ac
	/*	key=1;	
	 if(i>60){
			key=0;
 sprintf(buf,"c\n");
 				HAL_UART_Transmit(&huart1, (uint8_t*)buf, COUNTOF(buf)-1, 5000);
													op=0;
										k[18]=0;
										point1=0;
										point2=0;
										x1=0;x2=0;result=0;flag=1;
			for(i=0;i<400;i++){
			buf[i]=0;
				buf8[i]=0;
				buf5[i]=0;
	//			hex2[i]=0;
			}
		}
 
	 j=0;	 
	 	 				
//		while(!((n_s&0x1000)&&(n_s&0x800)&&(n_s&0x400)&&(n_s&0x200)&&(n_s&0x100)&&(n_s&0x080)&&(n_s&0x040)&&(n_s&0x020)&&(n_s&0x010)&&(n_s&0x002)&&(n_s&0x001)) ){
//		 	n_s=GPIOA->IDR; 
//		}
		TIM1->SR &=0xfe;
		TIM1->CNT=0;
		 	 	 GPIOB->ODR=0x01;
	 	while(key ){
 				HAL_UART_Transmit(&huart1, (uint8_t*)buf, COUNTOF(buf)-1, 5000);
 //while(key){
 
	 n_s=GPIOA->IDR&(0x9ff3);
  
		switch(n_s) {
			
				case(0x9fd2):{//pa0$pa5 "0"
							
				
						key=0;
							if(flag){x1=x1*10;if(point1>0){point1++;}}
							else{x2=x2*10;if(point2>0){point2++;}} 
 
					break;
				}
		 		case(0x9f72):{	//pa0$pa7 "1"
			 	key=0; 
							if(flag){x1=x1*10+1;if(point1>0){point1++;}}
							else{x2=x2*10+1;if(point2>0){point2++;}} 
		TIM16->SR &=0xfe; 					
							while(!((TIM16->SR)&0x01));
					
					break;
				}
				case(0x9ff0):{//pa0$pa1	"2"
					 	key=0; 
							if(flag){x1=x1*10+2;if(point1>0){point1++;}}
							else{x2=x2*10+2;if(point2>0){point2++;}} 
 
							TIM16->SR &=0xfe;
						while(!((TIM16->SR)&0x01)); 
					break;
				}
				case(0x9fb2):{	//pa0$pa6 "3"
				 key=0; 
							if(flag){x1=x1*10+3;if(point1>0){point1++;}}
							else{x2=x2*10+3;if(point2>0){point2++;}} 
							 		
							break;}
				case(0x9df2):{//pa0$pa9	"4"
				 	key=0;
				 
 
							if(flag){x1=x1*10+4;if(point1>0){point1++;}}
							else{x2=x2*10+4;if(point2>0){point2++;}} 
			 		
							break;}
				case(0x97e3):{	//pa11&pa4	"5"
				 	key=0; 
							if(flag){x1=x1*10+5;if(point1>0){point1++;}}
							else{x2=x2*10+5;if(point2>0){point2++;}} 
							break;		
 
				}
				case(0x97d3):{//pa11&pa5	"6"
					 	key=0; 
							if(flag){x1=x1*10+6;if(point1>0){point1++;}}
							else{x2=x2*10+6;if(point2>0){point2++;}} 
	 		
							break;}
				case(0x9773):{	//pa11&pa7	"7"
				key=0; 
							if(flag){x1=x1*10+7;if(point1>0){point1++;}}
							else{x2=x2*10+7;if(point2>0){point2++;}} 
							break;		
							break;
				}
				case(0x97f1):{	//pa11&pa1 "8"
					 key=0; 
							if(flag){x1=x1*10+8;if(point1>0){point1++;}}
							else{x2=x2*10+8;if(point2>0){point2++;}} 
 	
							break;}
				case(0x97b3):{//pa11&pa6	"9"
				 key=0;
					 
							if(flag){x1=x1*10+9;if(point1>0){point1++;}}
							else{x2=x2*10+9;if(point2>0){point2++;}} 
							break;		
							break;
				}
				
				case(0x9e73):{//pa8&pa7 "+"
							key=0;
							if(point1>0){double power1=(double)pow(10,(point1-1));x1=x1/power1; 	point1=0; }
							if(point2>0) {double power2=(double)pow(10,(point2-1)); x2=x2/power2;	point2=0; }
													 if(op=='*') {if(x2!=0)result= (x1*x2);else result=x1;}
								else if(op=='+'){if(x2!=0) result=(x1+x2);else result=x1;}
								else if(op=='-') result= (x1-x2);
								else if(op=='/') result= (x1/x2);
								else if(op==0) result= x1;
						flag=0;
//						  
//			sprintf(buf8," %3f %c %3f = %3f\n",x1,op,x2,result);
//				 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
						x1=result;	
						 x2=0;
						op='+';
break;
								break;
				}
				case(0x9ef2):{//pa8&pa0 "="
							key=0; 
							if(point1>0){double power1=(double)pow(10,(point1-1));x1=x1/power1; 	point1=0; }
							if(point2>0) {double power2=(double)pow(10,(point2-1)); x2=x2/power2;	point2=0; }

							flag=0;
						   if(op=='*') {if(x2!=0)result= (x1*x2);else result=x1;}
								else if(op=='+'){if(x2!=0) result=(x1+x2);else result=x1;}
								else if(op=='-') result= (x1-x2);
								else if(op=='/') result= (x1/x2);
								else if(op==0) result= x1;
//								sprintf(buf8," %3f %c %3f = %3f\n",x1,op,x2,result);
//								HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000); 
								op=0;  x1=result; x2=0;	 
									break;
		
}
				case(0x9ef1):{	//pa8&pa1" "-"
					key=0;
 
							if(point1>0){double power1=(double)pow(10,(point1-1));x1=x1/power1; 	point1=0; }
							if(point2>0) {double power2=(double)pow(10,(point2-1)); x2=x2/power2;	point2=0; } 
								if(op=='*') {if(x2!=0)result= (x1*x2);else result=x1;}
								else if(op=='+'){if(x2!=0) result=(x1+x2);else result=x1;}
								else if(op=='-') result= (x1-x2);
								else if(op=='/') result= (x1/x2);
								else if(op==0) result= x1;
//										 	sprintf(buf8," %3f %c %3f = %3f\n",x1,op,x2,result);
//				 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
					 		x1=result;							 flag=0;	
						 x2=0;
						op='-';break;
				}//pa8&pa1
				case(0x9eb3):{	//pa8&pa4"*"
					key=0; 	flag=0;			 				
 													if(point1>0){double power1=(double)pow(10,(point1-1));x1=x1/power1; 	point1=0; }
							if(point2>0) {double power2=(double)pow(10,(point2-1)); x2=x2/power2;	point2=0; }
						
												   if(op=='*') {if(x2!=0)result= (x1*x2);else result=x1;}
								else if(op=='+'){if(x2!=0) result=(x1+x2);else result=x1;}
								else if(op=='-') result= (x1-x2);
								else if(op=='/') result= (x1/x2);
								else if(op==0) result= x1;
//				 sprintf(buf8," %3f %c %3f = %3f\n",x1,op,x2,result);
//				 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
					x1=result;op='*';
						 x2=0;	 break;}
				case(0x9cf3):{	//pa8&pa9	"/"
					key=0;
					  if(point1>0){double power1=(double)pow(10,(point1-1));x1=x1/power1; 	point1=0; }
							if(point2>0) {double power2=(double)pow(10,(point2-1)); x2=x2/power2;	point2=0; }
					 if(op=='*') {if(x2!=0)result= (x1*x2);else result=x1;}
								else if(op=='+'){if(x2!=0) result=(x1+x2);else result=x1;}
								else if(op=='-') result= (x1-x2);
								else if(op=='/') result= (x1/x2);
								else if(op==0) result= x1;
						 
 						flag=0;
						op='/';		 
//						 	 	sprintf(buf8," %3f %c %3f = %3f\n",x1,op,x2,result);
//				 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
					x2=0;	x1=result;break;
				}	


				case(0x95f3):{	//pa11&pa9	"."	
					key=0		;
					if(flag){ if(point1==0){point1++;}}
					else{ if(point2==0){point2++;}}
					break;	
				}
				case(0x97f2):{	//pa11&pa0		"00"
					key=0;					
					if(flag){x1=x1*100;if(point1>0){point1+=2;}}
						else{x2=x2*100 ;if(point2>0){point2+=2;}} 				
					break;}
				case(0x93f3):{//pa11&pa10		"000"
					key=0;					
					if(flag){x1=x1*1000;if(point1>0){point1+=2;}}
						else{x2=x2*1000 ;if(point2>0){point2+=2;}} 	 
					break;
				}
				
				case(0x9ee3):{	//pa8&pa4		"mu"
					key=0;
				for( i=0;i<50;i++){
								buf5[i]=0;
								}
							if (flag)	sprintf(buf5,"%f",x1);
							else  if (x2!=0)sprintf(buf5,"%f",x2);
							else sprintf(buf5,"%f",result);
							int len =strlen(buf5);							
							sprintf(hex2,"54454A415241545F42414E4B303230303030303030303034303%c3%c3%c3%c3%c3%c3%c3%c3%c3%c3%c",buf5[len-18],buf5[len-17],buf5[len-16],buf5[len-15],buf5[len-14], buf5[len-13],buf5[len-12],buf5[len-11],buf5[len-10],buf5[len-9],buf5[len-8] );
							char asciiStr[100];
							for(int i = 0; i < 151; i +=2)
							{
								asciiStr[i/2] = getHexVal(hex2[i])*16 + getHexVal(hex2[i+1]);
								HAL_UART_Transmit(&huart1, (uint8_t*)(asciiStr+i/2), 1, 5000);
							}
												 	k[17]=301;
				while(k[17]>300){
						k[17]=0;	
						TIM16->SR &=0xfe;
						while(!((TIM16->SR)&0x01))
							{	 n_s=GPIOA->IDR&(0x9ff3);if((n_s&0x710)==0){
							k[17]++;}
						}
						} 
						break;	
				}
			case(0x8fb3):{	//pa12&pa6 "ce"
				key=0;	
					if(flag){x1=0;if(point1>0){point1=0;}}
							else{x2=0;if(point2>0){point2=0;}}
						break;
			}
			 
	

		}

		if(((TIM1->SR)&0x01)){
		
 
				if((k[0]>0)){
				
											key=1;
 				 //sprintf(buf8,"0 \n" );
//					 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);		
 	
							if(flag){x1=x1*10+0;if(point1>0){point1++;}}
							else{x2=x2*10+0;if(point2>0){point2++;}}
						break;
					}
			else if((k[1]>0)){
 				//sprintf(buf8,"1 \n" );
//								 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
 	 
											
										key=0;	if(flag){x1=x1*10+1;if(point1>0){point1++;}}
											else{x2=x2*10+1;if(point2>0){point2++;}}
						 }
			else if((k[2]>0) ){
							 key=0;
 
 																		//sprintf(buf8,"2 \n" );
//								 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
											if(flag){x1=x1*10+2;if(point1>0){point1++;}}
											else{x2=x2*10+2;if(point2>0){point2++;}}
					 break;
									} 		
			else if( k[3]>0 ){

							 key=0;
			 
															//sprintf(buf8,"3 \n" );
//									 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
											if(flag){x1=x1*10+3;if(point1>0){point1++;}}
											else{x2=x2*10+3;if(point2>0){point2++;}}
					 break;
									} 
			else if(k[4]>0){
							 key=0;
				k[4]=301;
										while(k[4]>300){
											k[4]=0;	
											TIM16->SR &=0xfe;
											while(!((TIM16->SR)&0x01))
												{n_s=GPIOA->IDR;if((n_s&0x201)==0){
												k[4]++;}
											}
											}
																		//sprintf(buf8,"4 \n" );
//									 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
											if(flag){x1=x1*10+4;if(point1>0){point1++;}}
											else{x2=x2*10+4;if(point2>0){point2++;}}
					 break;
									} 
		  else if(  k[5]>0){

					k[5]=2000+1;
				j=1000+1;
//				 while(j>100){
//						k[5]=0;	
//					 j=0;
//						TIM16->SR &=0xfe;
//						while(!((TIM16->SR)&0x01));
//							TIM16->SR &=0xfe;
//						while(!((TIM16->SR)&0x01))
//							{
//								n_s=(GPIOA->IDR)&(0x9ff3);
//								if(!(n_s&0x9a1)){
//									j=0;
//								 while(!(n_s&0x9a1))  { j++;	n_s=(GPIOA->IDR)&(0x9ff3);} 
//									if(j<100){
//									break;
//										break;
//									}
//								 
//								}
//							
//								
//								 
////								n_s=GPIOA->IDR;if((n_s&0x810)==0){
////							k[5]++;}
//						}

//								}				
//				 sprintf(buf8,"5:%d \n",j );
//					 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
//					 key=0;
//							if(flag){x1=x1*10+5;if(point1>0){point1++;}}
//							else{x2=x2*10+5;if(point2>0){point2++;}} 
//	break;				

		 }
		  else if( k[6]>0) { 
				 //sprintf(buf8,"6\n");
//					 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
						k[6]=301;
				while(k[6]>300){
						k[6]=0;	
						TIM16->SR &=0xfe;
						while(!((TIM16->SR)&0x01))
							{n_s=GPIOA->IDR;if((n_s&0x820)==0){
							k[6]++;}
						}
						}
												key=0;
							if(flag){x1=x1*10+6;if(point1>0){point1++;}}
							else{x2=x2*10+6;if(point2>0){point2++;}}
							break;

						}
				
			else if( (k[7]>0 )){ 
					//sprintf(buf8,"7 \n" );
// 	 			 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
				k[7]=301;
					while(k[7]>300){
						k[7]=0;	
						TIM16->SR &=0xfe;
						while(!((TIM16->SR)&0x01))
							{n_s=GPIOA->IDR;if((n_s&0x880)==0){
							k[7]++;}
							}
						} 			
					key=0;
						if(flag){x1=x1*10+7;if(point1>0){point1++;}}
						else{x2=x2*10+7;if(point2>0){point2++;}} 
            break;		
				 } 
		
			else if( (k[8]>0)){ 
 				//sprintf(buf8,"8\n");
// 			 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
					k[8]=301;
					while(k[8]>300){
						k[8]=0;	
						TIM16->SR &=0xfe;
						while(!((TIM16->SR)&0x01))
							{n_s=GPIOA->IDR;if((n_s&0x802)==0){
							k[8]++;}
						}
						}
											key=0;
						if(flag){x1=x1*10+8;if(point1>0){point1++;}}
						else{x2=x2*10+8;if(point2>0){point2++;}}
						
break;
					}
			else if(k[9]>0){
					key=0;
					//sprintf(buf8,"9\n");
//					HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
					k[9]=301;
					while(k[9]>300){
						k[9]=0;	
						TIM16->SR &=0xfe;
						while(!((TIM16->SR)&0x01))
							{n_s=GPIOA->IDR;if((n_s&0x840)==0){
							k[9]++;}
						}
						}
						
						if(flag){x1=x1*10+9;if(point1>0){point1++;}}
						else{x2=x2*10+9;if(point2>0){point2++;}}
						break;

					}
			
			else if (k[10]>0){
				
  				 sprintf(buf8,"+\n",k[10]);
//	 			 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
			  	while(k[10]>300){
						k[10]=0;	
						TIM16->SR &=0xfe;
						while(!((TIM16->SR)&0x01))
							{n_s=GPIOA->IDR;
							if((n_s&0x100)==(n_s&0x080)){
							k[10]++;}
						}
						}
						 													if(point1>0){double power1=(double)pow(10,(point1-1));x1=x1/power1; 	point1=0; }
							if(point2>0) {double power2=(double)pow(10,(point2-1)); x2=x2/power2;	point2=0; }
													 if(op=='*') {if(x2!=0)result= (x1*x2);else result=x1;}
								else if(op=='+'){if(x2!=0) result=(x1+x2);else result=x1;}
								else if(op=='-') result= (x1-x2);
								else if(op=='/') result= (x1/x2);
								else if(op==0) result= x1;
						flag=0;
						  
			sprintf(buf8," %3f %c %3f = %3f\n",x1,op,x2,result);
//				 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
						x1=result;	
						 x2=0;
						op='+';
break;
					}
				
		
			else if( (k[11]>1)){ //=
 					sprintf(buf8,"=\n");
 //			 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
//			  	while(k[11]>300){
//						k[11]=0;	
//						TIM16->SR &=0xfe;
//						while(!((TIM16->SR)&0x01))
//							{n_s=GPIOA->IDR;
//							if((n_s&0x100)==(n_s&0x001)){
//							k[11]++;}
//						}
//						}
						 													if(point1>0){double power1=(double)pow(10,(point1-1));x1=x1/power1; 	point1=0; }
							if(point2>0) {double power2=(double)pow(10,(point2-1)); x2=x2/power2;	point2=0; }

							flag=0;
						   if(op=='*') {if(x2!=0)result= (x1*x2);else result=x1;}
								else if(op=='+'){if(x2!=0) result=(x1+x2);else result=x1;}
								else if(op=='-') result= (x1-x2);
								else if(op=='/') result= (x1/x2);
								else if(op==0) result= x1;
//	 	sprintf(buf8," %3f %c %3f = %3f\n",x1,op,x2,result);
//				 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
					 
							op=0;
			 
//				 		sprintf(buf5," %3f",result);
//			 HAL_UART_Transmit(&huart1, (uint8_t*)buf5, COUNTOF(buf5)-1, 5000);
						x1=result;
						x2=0;	 
break;
					}
				
			else if( (k[12]>0) ){
 					 sprintf(buf8,"-\n");
// 	 			 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
//			  	while(k[12]>300){
//						k[12]=0;	
//						TIM16->SR &=0xfe;
//						while(!((TIM16->SR)&0x01))
//							{n_s=GPIOA->IDR;
//							if((n_s&0x100)==(n_s&0x002)){
//							k[12]++;}
//						}
//					}		
					
							if(point1>0){double power1=(double)pow(10,(point1-1));x1=x1/power1; 	point1=0; }
							if(point2>0) {double power2=(double)pow(10,(point2-1)); x2=x2/power2;	point2=0; } 
								if(op=='*') {if(x2!=0)result= (x1*x2);else result=x1;}
								else if(op=='+'){if(x2!=0) result=(x1+x2);else result=x1;}
								else if(op=='-') result= (x1-x2);
								else if(op=='/') result= (x1/x2);
								else if(op==0) result= x1;
//										 	sprintf(buf8," %3f %c %3f = %3f\n",x1,op,x2,result);
//				 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
					 		x1=result;							 flag=0;	
						 x2=0;
						op='-';break;
					}
								 
			else if( (k[13]>0)){
  					 sprintf(buf8,"*\n");
// 	 			 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
//			  	while(k[13]>300){
//						k[13]=0;	
//						TIM16->SR &=0xfe;
//						while(!((TIM16->SR)&0x01))
//							{n_s=GPIOA->IDR;
//							if((n_s&0x100)==(n_s&0x040)){
//								k[13]++;}
//						}
//					}
					flag=0;			 				
 													if(point1>0){double power1=(double)pow(10,(point1-1));x1=x1/power1; 	point1=0; }
							if(point2>0) {double power2=(double)pow(10,(point2-1)); x2=x2/power2;	point2=0; }
						
												   if(op=='*') {if(x2!=0)result= (x1*x2);else result=x1;}
								else if(op=='+'){if(x2!=0) result=(x1+x2);else result=x1;}
								else if(op=='-') result= (x1-x2);
								else if(op=='/') result= (x1/x2);
								else if(op==0) result= x1;
//				 sprintf(buf8," %3f %c %3f = %3f\n",x1,op,x2,result);
//				 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
					x1=result;op='*';
						 x2=0;	 break;
					}
							 
			else if( (k[14]>0) ){
  					 sprintf(buf8,"/\n");
// 	 			 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
//			  	while(k[14]>300){
//						k[14]=0;	
//						TIM16->SR &=0xfe;
//						while(!((TIM16->SR)&0x01))
//							{n_s=GPIOA->IDR;
//							if((n_s&0x100)==(n_s&0x200)){
//								k[14]++;}
//						}
//					}
											
				  if(point1>0){double power1=(double)pow(10,(point1-1));x1=x1/power1; 	point1=0; }
							if(point2>0) {double power2=(double)pow(10,(point2-1)); x2=x2/power2;	point2=0; }
					 if(op=='*') {if(x2!=0)result= (x1*x2);else result=x1;}
								else if(op=='+'){if(x2!=0) result=(x1+x2);else result=x1;}
								else if(op=='-') result= (x1-x2);
								else if(op=='/') result= (x1/x2);
								else if(op==0) result= x1;
						 
 						flag=0;
						op='/';		 
//						 	 	sprintf(buf8," %3f %c %3f = %3f\n",x1,op,x2,result);
//				 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
					x2=0;	x1=result;break;
					}
		
			
				 
			else if( (k[15]>0) ){
 					sprintf(buf8,".\n");
//	 			 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
				 while(k[15]>300){
						k[15]=0;	
						TIM16->SR &=0xfe;
						while(!((TIM16->SR)&0x01))
							{n_s=GPIOA->IDR;if((n_s&0x800)==(n_s&0x200)){
							k[15]++;}
						}
						} 					key=0;
						if(flag){ if(point1==0){point1++;}}
						else{ if(point2==0){point2++;}}
break;				
			}
			
			else if( k[16]>0){
 					//sprintf(buf8,"0d\n");
//	 			 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
				 	k[16]=301;
				while(k[16]>300){
						k[16]=0;	
						TIM16->SR &=0xfe;
						while(!((TIM16->SR)&0x01))
							{n_s=GPIOA->IDR;if((n_s&0x801)==0){
							k[16]++;}
						}
						} 
						if(flag){x1=x1*100;if(point1>0){point1+=2;}}
						else{x2=x2*100 ;if(point2>0){point2+=2;}} 					key=0;
					break;
			} 
		  else if(  k[17]>0 ){//send
					for( i=0;i<50;i++){
								buf5[i]=0;
								}
							if (flag)	sprintf(buf5,"%f",x1);
							else  if (x2!=0)sprintf(buf5,"%f",x2);
							else sprintf(buf5,"%f",result);
							int len =strlen(buf5);							
							sprintf(hex2,"54454A415241545F42414E4B303230303030303030303034303%c3%c3%c3%c3%c3%c3%c3%c3%c3%c3%c",buf5[len-18],buf5[len-17],buf5[len-16],buf5[len-15],buf5[len-14], buf5[len-13],buf5[len-12],buf5[len-11],buf5[len-10],buf5[len-9],buf5[len-8] );
							char asciiStr[100];
							for(int i = 0; i < 151; i +=2)
							{
								asciiStr[i/2] = getHexVal(hex2[i])*16 + getHexVal(hex2[i+1]);
								HAL_UART_Transmit(&huart1, (uint8_t*)(asciiStr+i/2), 1, 5000);
							}
												 	k[17]=301;
				while(k[17]>300){
						k[17]=0;	
						TIM16->SR &=0xfe;
						while(!((TIM16->SR)&0x01))
							{	 n_s=GPIOA->IDR&(0x9ff3);if((n_s&0x710)==0){
							k[17]++;}
						}
						} 
						break;							
					} 
	   	else if((k[19]>0)){//ce
				
											key=0;
				 //sprintf(buf8,"ce\n",k[19]);
					 
							 	k[19]=301;
				while(k[19]>300){
						k[19]=0;	
						TIM16->SR &=0xfe;
						while(!((TIM16->SR)&0x01))
							{	 n_s=GPIOA->IDR&(0x9ff3);if((n_s&0x1040)==0){
							k[19]++;}
						}
						} 
			
							if(flag){x1=0;if(point1>0){point1=0;}}
							else{x2=0;if(point2>0){point2=0;}}
						break;
					}
			else if(k[18]>0){
// 					//sprintf(buf8,"000\n");
//	 			 HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
				 	k[18]=301;
				while(k[18]>300){
						k[18]=0;	
						TIM16->SR &=0xfe;
						while(!((TIM16->SR)&0x01))
							{n_s=GPIOA->IDR;if((n_s&0xc00)==0){
							k[18]++;}
						}
						} 	
				 key=0;
						if(flag){x1=x1*1000;if(point1>0){point1+=3;}}
						else{x2=x2*1000;if(point2>0){point2+=3;}} 
						break;
					}
				
			
 
		}

		 		}//end while(key)		
		  	 	 GPIOB->ODR=0;
			while(1){
						 n_s=GPIOA->IDR&(0x001);
						j=0;
						while(n_s){ n_s=GPIOA->IDR&(0x001);}
						while(!n_s){
							j++;
							 n_s=GPIOA->IDR&(0x001);
							
						}
						if(j<1000){
							j=0;
							while(n_s){ n_s=GPIOA->IDR&(0x001);}
						while(!n_s){
							j++;
							 n_s=GPIOA->IDR&(0x001);
							
						}
							if(j<1000){
								break;}
						}
					}
		//	GPIOB->ODR=0x01;

							TIM16->SR &=0xfe;
						while(!((TIM16->SR)&0x01));
			//			GPIOB->ODR=0;
//												TIM16->SR &=0xfe;
//						while(!((TIM16->SR)&0x01));
//					
// 		 		sprintf(buf8,"%f\n",x1);
//  				HAL_UART_Transmit(&huart1, (uint8_t*)buf8, COUNTOF(buf8)-1, 5000);
// 		TIM16->SR &=0xfe;
//						while(!((TIM16->SR)&0x01));
//									TIM16->SR &=0xfe;
//						while(!((TIM16->SR)&0x01));
//							TIM16->SR &=0xfe;
//						while(!((TIM16->SR)&0x01));
}//end if*/
 }
 }//end while
	}//end main
 
		
 
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

 
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
  /* USER CODE END Error_Handler */ 
}

#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %drn", file, line) */
  /* USER CODE END 6 */

}

#endif
int getHexVal(char c)
{
  if(c >= '0' && c<= '9')
    return c - '0';
  else if(c >= 'a' && c<= 'f')
    return c - 'a' + 10;
  else if(c >= 'A' && c<= 'F')
    return c - 'A' + 10;
  else
    return -1;//error
}

void send(char* hex){
	

int hexLen = strlen(hex);
char asciiStr[hexLen/2+1];
for(int i = 0; i < hexLen; i +=2)
{
  asciiStr[i/2] = getHexVal(hex[i])*16 + getHexVal(hex[i+1]);
	HAL_UART_Transmit(&huart1, (uint8_t*)(asciiStr+i/2), 1, 5000);
}

}
/**
  * @}
  */ 

/**
  * @}
*/ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
